before_script:
    - rm -rf "*-env"; python3 -m venv ${CI_JOB_ID}-env
    - ${CI_JOB_ID}-env/bin/pip3 install -U pip
  
after_script:
    - rm -rf ${CI_JOB_ID}-env

stages:
  - style_check
  - unit_tests
  - execution_checks
  - build
  - release
  
StyleChecks:
  stage: style_check
  script:
    -  ${CI_JOB_ID}-env/bin/pip3 install black
    - ${CI_JOB_ID}-env/bin/black mod_prediction --check --skip-string-normalization
  allow_failure: True

UnitTests:
  stage: unit_tests
  script:
    - ${CI_JOB_ID}-env/bin/pip3 install -r requirements.txt
    - ${CI_JOB_ID}-env/bin/python3 mod_prediction/utils/geometry.py

Training:
  stage: execution_checks
  script:
    - ${CI_JOB_ID}-env/bin/pip3 install -r requirements.txt
    - ${CI_JOB_ID}-env/bin/python3 mod_prediction/train.py --debug
    - echo 'metric_name 12' > metrics.txt
  artifacts:
    reports:
      metrics: metrics.txt

Main:
  stage: execution_checks
  script:
    - ${CI_JOB_ID}-env/bin/pip3 install -r requirements.txt
    - ${CI_JOB_ID}-env/bin/python3 mod_prediction/main.py --agg
    
Build:
    stage: build
    only:
        - tags
    script: 
        - ${CI_JOB_ID}-env/bin/pip3 install wheel
        - ${CI_JOB_ID}-env/bin/python3 setup.py sdist bdist_wheel
    artifacts:
        when: always
        paths:
            - dist
    allow_failure: false

Release:
    stage: release
    only:
        - tags
    script:
        - ${CI_JOB_ID}-env/bin/pip3 install twine
        - ${CI_JOB_ID}-env/bin/python3 -m twine upload --repository-url ${GITLAB_SERVER} --username __token__ --password ${GITLAB_PASSWORD} dist/*
    allow_failure: false
